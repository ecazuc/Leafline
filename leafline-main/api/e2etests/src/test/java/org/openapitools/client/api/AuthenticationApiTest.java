/*
 * CPOO Server API
 * This is a prototype of CPOO Project's front/back API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@mightycode.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.UserDTO;
import org.openapitools.client.model.ProfilDTO;

/**
 * API tests for AuthenticationApi
 */
@SuppressWarnings("KotlinInternalInJava")
public class AuthenticationApiTest {

  private final AuthenticationApi authenticationApi = new AuthenticationApi();

  private final AdministrationApi administrationApi = new AdministrationApi();

  @BeforeEach
  public void init() throws ApiException {

    // Simulate the behavior of a web browser by remembering cookies set by the server
    OkHttpClient.Builder builder = new OkHttpClient.Builder();
    OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
    ApiClient apiClient = new ApiClient(okHttpClient);
    authenticationApi.setApiClient(apiClient);
    administrationApi.setApiClient(apiClient);
  }

//  @Test
//  public void userSigninPostTest() throws ApiException {
//
//    // Signing in with invalid credentials should fail with UNAUTHORIZED
//    UserDTO userCredentials = new UserDTO().login("tester").password("invalid");
//    try {
//      authenticationApi.userSigninPost(userCredentials);
//      Assertions.fail();
//    }
//    catch (ApiException e) {
//      Assertions.assertEquals(HttpStatus.SC_UNAUTHORIZED, e.getCode());
//    }
//
//    // Signing in with valid credentials should work
//    authenticationApi.userSigninPost(userCredentials.password("tester"));
//
//    // Signing in again should fail with CONFLICT
//    try {
//      authenticationApi.userSigninPost(userCredentials);
//      Assertions.fail();
//    }
//    catch (ApiException e) {
//      Assertions.assertEquals(HttpStatus.SC_CONFLICT, e.getCode());
//    }
//  }

//  @Test
//  public void userProfileGetTest() throws ApiException {
//
//    // Getting profile information while not signed in should fail with FORBIDDEN
//    try {
//      authenticationApi.userProfileGet();
//      Assertions.fail();
//    }
//    catch (ApiException e) {
//      Assertions.assertEquals(HttpStatus.SC_FORBIDDEN, e.getCode());
//    }
//
//    // Sign in
//    UserDTO userCredentials = new UserDTO().login("tester").password("tester");
//    authenticationApi.userSigninPost(userCredentials);
//
//    // Getting profile information with valid credentials should work
//    ProfilDTO userProfile = authenticationApi.userProfileGet();
//    Assertions.assertEquals("tester", userProfile.getLogin());
//  }

}


